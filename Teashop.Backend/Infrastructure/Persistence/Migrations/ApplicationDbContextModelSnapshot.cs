// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teashop.Backend.Infrastructure.Persistence.Context;

namespace Teashop.Backend.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:dbo.OrderNumbers", "'OrderNumbers', 'dbo', '100000', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:dbo.ProductNumbers", "'ProductNumbers', 'dbo', '100000', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Teashop.Backend.Domain.Cart.Entities.CartEntity", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Cart.Entities.CartItem", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryCode");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.ContactInfo", b =>
                {
                    b.Property<Guid>("ContactInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactInfoId");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChosenPaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChosenShippingMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ContactInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.OrderNumbers");

                    b.Property<Guid>("PaymentCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PaymentFee")
                        .HasColumnType("float");

                    b.Property<Guid>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ShippingFee")
                        .HasColumnType("float");

                    b.Property<double>("SubtotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("BillingAddressId")
                        .IsUnique();

                    b.HasIndex("ChosenPaymentMethodName");

                    b.HasIndex("ChosenShippingMethodName");

                    b.HasIndex("ContactInfoId")
                        .IsUnique();

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("PaymentCardId")
                        .IsUnique();

                    b.HasIndex("ShippingAddressId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.OrderLine", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderLineNo")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderLineId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.PaymentCard", b =>
                {
                    b.Property<Guid>("PaymentCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentCardId");

                    b.ToTable("PaymentCards");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<int>("PaymentMethodNo")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.ShippingMethod", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<int>("ShippingMethodNo")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("ShippingMethods");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Product.Entities.BrewingInfo", b =>
                {
                    b.Property<Guid>("BrewingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumberOfBrewingsInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TemperatureInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrewingInfoId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("BrewingInfo");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Product.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentCategoryCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.HasAlternateKey("Name");

                    b.HasIndex("ParentCategoryCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Product.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Product.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.ProductNumbers");

                    b.Property<int>("QuantityPerPrice")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductNumber")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Cart.Entities.CartItem", b =>
                {
                    b.HasOne("Teashop.Backend.Domain.Cart.Entities.CartEntity", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teashop.Backend.Domain.Product.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.Address", b =>
                {
                    b.HasOne("Teashop.Backend.Domain.Order.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.OrderEntity", b =>
                {
                    b.HasOne("Teashop.Backend.Domain.Order.Entities.Address", "BillingAddress")
                        .WithOne()
                        .HasForeignKey("Teashop.Backend.Domain.Order.Entities.OrderEntity", "BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teashop.Backend.Domain.Order.Entities.PaymentMethod", "ChosenPaymentMethod")
                        .WithMany()
                        .HasForeignKey("ChosenPaymentMethodName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teashop.Backend.Domain.Order.Entities.ShippingMethod", "ChosenShippingMethod")
                        .WithMany()
                        .HasForeignKey("ChosenShippingMethodName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teashop.Backend.Domain.Order.Entities.ContactInfo", "ContactInfo")
                        .WithOne()
                        .HasForeignKey("Teashop.Backend.Domain.Order.Entities.OrderEntity", "ContactInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teashop.Backend.Domain.Order.Entities.PaymentCard", "PaymentCard")
                        .WithOne()
                        .HasForeignKey("Teashop.Backend.Domain.Order.Entities.OrderEntity", "PaymentCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teashop.Backend.Domain.Order.Entities.Address", "ShippingAddress")
                        .WithOne()
                        .HasForeignKey("Teashop.Backend.Domain.Order.Entities.OrderEntity", "ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Order.Entities.OrderLine", b =>
                {
                    b.HasOne("Teashop.Backend.Domain.Order.Entities.OrderEntity", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teashop.Backend.Domain.Product.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Product.Entities.BrewingInfo", b =>
                {
                    b.HasOne("Teashop.Backend.Domain.Product.Entities.ProductEntity", null)
                        .WithOne("BrewingInfo")
                        .HasForeignKey("Teashop.Backend.Domain.Product.Entities.BrewingInfo", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Product.Entities.Category", b =>
                {
                    b.HasOne("Teashop.Backend.Domain.Product.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryCategoryId");
                });

            modelBuilder.Entity("Teashop.Backend.Domain.Product.Entities.ProductCategory", b =>
                {
                    b.HasOne("Teashop.Backend.Domain.Product.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teashop.Backend.Domain.Product.Entities.ProductEntity", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
